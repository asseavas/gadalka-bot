import { Context } from 'telegraf';
import { parseDate } from './parseDate';
import { calculateMatrix } from './calculateMatrix';
import { calculateCompatibility } from './calculateCompatibility';
import { DateParts } from '../types';

export const handleDates = (ctx: Context, messageWithDates: string) => {
  const dates = messageWithDates.split(/\s+[–∏\/]\s+/);
  const parsedDates = dates.map(parseDate);

  if (dates.length !== 2) {
    return ctx.reply('–ù—É–∂–Ω–æ –¥–≤–µ –¥–∞—Ç—ã –¥–ª—è –º–∞–≥–∏–∏! üîÆ‚ú® –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞: *01.12.2004* –∏ *20.06.2003*', {
      parse_mode: 'Markdown',
    });
  }

  if (parsedDates.includes(null)) {
    return ctx.reply(
      '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! üìÜ\n\n' +
        '–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞: *01.12.2004* –∏ *20.06.2003*.\n' +
        '–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üîÆ‚ú®',
      { parse_mode: 'Markdown' }
    );
  }

  const [date1, date2] = parsedDates as [DateParts, DateParts];
  const matrix1 = calculateMatrix(date1);
  const matrix2 = calculateMatrix(date2);
  const compatibilityMatrix = calculateCompatibility(matrix1, matrix2);

  return ctx.reply(
    `üîÆ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –¥–∞—Ç–∞–º:\n\n` +
      `üìÖ *–ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞:* ${dates[0]}\n` +
      `üìÖ *–í—Ç–æ—Ä–∞—è –¥–∞—Ç–∞:* ${dates[1]}\n\n` +
      `‚ú® *–ú–∞—Ç—Ä–∏—Ü–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:*\n` +
      `–ü–∞—Ä–∞ –≤ –≥–ª–∞–∑–∞—Ö –æ–∫—Ä—É–∂–∞—é—â–∏—Ö: ${compatibilityMatrix.visitingCard}\n` +
      `–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—ã: ${compatibilityMatrix.talents}\n` +
      `–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∫–∞—Ä–º–∞: ${compatibilityMatrix.soulMission}\n` +
      `–õ—é–±–æ–≤–Ω–∞—è –∫–∞—Ä–º–∞: ${compatibilityMatrix.karmicTail}\n` +
      `–û–±—â–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${compatibilityMatrix.comfortZone}`,
    { parse_mode: 'Markdown' }
  );
};
